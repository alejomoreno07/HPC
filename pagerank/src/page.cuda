#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <fstream>
#include <math.h>
#include <cuda.h>
#include <time.h>

// Global Variables
#define dim_matrix 32
#define inf 1000000
#define error 1e-3
#define damping 0.8
#define blockSize 32

__global__ void parMult(double *TM,double *v,double *output){
    int col = blockIdx.x*blockDim.x+threadIdx.x;
    int Pvalue;

    if(col < dim_matrix){
        Pvalue = 0;
        for (int k = 0; k < dim_matrix ; ++k){
            Pvalue += v[k] * TM[k*dim_matrix+col];
        }

        output[col] = Pvalue;
    }
}



__global__ void count_ones_par(double *input,int *output){
    int col = blockIdx.x*blockDim.x+threadIdx.x;

	if(col < dim_matrix){	
		double temporal = 0;
		for(int j =0; j < dim_matrix; j++){
			temporal += input[col*dim_matrix+j];
		}
		output[col]=temporal;
	}
}





__global__ void transitionMatrix_par(double *input, double *v, double *last_v,int *ones, double *output){
	int row = blockIdx.y*blockDim.y+threadIdx.y;
    int col = blockIdx.x*blockDim.x+threadIdx.x;

	if((col < dim_matrix) && (row < dim_matrix)){	
		v[col] = (1.0/(1.0*dim_matrix));
		last_v[col] = inf;	
		if(ones[col]>0) output[col*dim_matrix+row]=input[col*dim_matrix+row]*(1.0/(1.0*ones[col]));
		else output[col*dim_matrix+row]=0.0;
	}
}




__global__ void M_hat_par(double *input, double *output){
	int row = blockIdx.y*blockDim.y+threadIdx.y;
	int col = blockIdx.x*blockDim.x+threadIdx.x;
	if((row < dim_matrix) &&  (col < dim_matrix)){
		int size = dim_matrix*dim_matrix;
		output[col*dim_matrix+row]=0.8*input[col*dim_matrix+row] + ((0.2))/(1.0*dim_matrix);		
	}
}



void fillMatrix(double *a,int rows,int cols){
	srand(time(NULL));
	for(int i = 0; i < rows ; i++){
		for(int j = 0; j < cols; j++){
			//if(i == j) a[i*cols+j] = 0;
			//else a[i*cols+j] = ;
			//else {
				int x;
				scanf("%d",&x);
				a[i*cols+j] = x;
			//}
		}
	}
}

__global__ void copy_values_par(double *input, double *output,int dim1){
	int col = blockIdx.x*blockDim.x+threadIdx.x;
	if(col < dim1){
		output[col] = input[col];
	}
}





double quadratic_error(double *v,double *last_v,int dim1){
	double resultado = 0.0;
	for(int i = 0; i < dim1; i++){
		resultado += (v[i]-last_v[i])*(v[i]-last_v[i]);
	}
	resultado = sqrt(resultado);
	return resultado;
}


void printer(double *mat,int dim){
	int size = dim*dim;
	for(int i = 0; i < size ; i++){
		if(i%dim == 0) printf("\n");
		printf("%lf ",mat[i]);
	}
	printf("\n");
}

void printer2(double *mat,int dim){
	for(int i = 0; i < dim ; i++){
		printf("\n");
		printf("%.15lf ",mat[i]);
	}
	printf("\n");
}


int main(){
	int size1 		= dim_matrix * dim_matrix * sizeof(double);
	int size2		= dim_matrix * sizeof(double);
	double *a		= (double*) malloc(size1);
	double *b 		= (double*) malloc(size2);
	double *tm   	= (double*) malloc(size1);
	double *m_hat   = (double*) malloc(size1);
	double *v   	= (double*) malloc(size2);
	double *last_v 	= (double*) malloc(size2);
	int *ones 		= (int*) malloc(size2);

	int blocks      =   ceil(dim_matrix/(1.0*blockSize));
    double *aInDevice;
    double *bInDevice; 
    double *tmInDevice;
    double *m_hatInDevice;
    double *vInDevice;
    double *last_vInDevice;
    int *onesInDevice;

	clock_t start, end, startGPU, endGPU;
    double cpu_time_used, gpu_time_used;

    cudaMalloc((void **) &aInDevice, size1);
    cudaMalloc((void **) &bInDevice, size1);
    cudaMalloc((void **) &tmInDevice, size1);
    cudaMalloc((void **) &m_hatInDevice, size1);
    cudaMalloc((void **) &vInDevice, size2);
    cudaMalloc((void **) &last_vInDevice, size2);
    cudaMalloc((void **) &onesInDevice, size2);

    startGPU = clock();
    cudaMemcpy(aInDevice, a, size1, cudaMemcpyHostToDevice);
    cudaMemcpy(bInDevice, b, size2, cudaMemcpyHostToDevice);
    cudaMemcpy(tmInDevice, tm, size2, cudaMemcpyHostToDevice);
    cudaMemcpy(m_hatInDevice, m_hat, size2, cudaMemcpyHostToDevice);
    cudaMemcpy(vInDevice, v, size2, cudaMemcpyHostToDevice);
    cudaMemcpy(last_vInDevice, last_v, size2, cudaMemcpyHostToDevice);
    cudaMemcpy(onesInDevice, ones, size2, cudaMemcpyHostToDevice);

	fillMatrix(a,dim_matrix,dim_matrix);
	count_ones_par<<<dimGrid,dimBlock>>> (aInDevice,onesInDevice);
	//count_ones(a,ones,dim_matrix);
	transitionMatrix_par<<<dimGrid,dimBlock>>> (tmInDevice,vInDevice ,last_vInDevice,onesInDevice,tmInDevice);
	//transitionMatrix(a,v,last_v,ones,tm,dim_matrix);
	M_hat_par<<<dimGrid,dimBlock>>> (tmInDevice,m_hatInDevice);
	//M_hat(tm,m_hat,dim_matrix);
	int steps = 0;
	while(quadratic_error(v,last_v,dim_matrix) > error){
		copy_values_par<<<dimGrid,dimBlock>>> (vInDevice,last_vInDevice);
		//copy_values(v,last_v,dim_matrix);
		parMult<<<dimGrid,dimBlock>>> (m_hat,last_v,v);
		//lastMult(m_hat,last_v,v,dim_matrix);
		steps++;	
	}
	cudaMemcpy(v, vInDevice, size2, cudaMemcpyDeviceToHost);
	endGPU = clock();
    gpu_time_used = ((double) (endGPU - startGPU)) / CLOCKS_PER_SEC;
    printf("Tiempo algoritmo paralelo: %.10f\n", gpu_time_used);
	printf("converge en: %d",steps);
	printer2(v,dim_matrix);

	////////////////////////////////////////////////////////////////
    cudaFree(aInDevice);
    cudaFree(bInDevice);
    cudaFree(tmInDevice);
    cudaFree(m_hatInDevice);
    cudaFree(vInDevice);
    cudaFree(last_vInDevice);
    cudaFree(onesInDevice);
    ////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////
    free(a);
    free(b);
    free(tmInDevice );
    free(m_hatInDevice );
	free(v );
	free(last_v ); 
	free(onesInDevice );   
    ////////////////////////////////////////////////////////////////
	return 0;
}


